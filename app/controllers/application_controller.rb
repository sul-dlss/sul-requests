# frozen_string_literal: true

# nodoc: Autogenerated
class ApplicationController < ActionController::Base
  include BotChallengePage::Controller

  layout 'application_new'
  # Prevent CSRF attacks by raising an exception.
  # For APIs, you may want to use :null_session instead.
  protect_from_forgery with: :exception

  rescue_from CanCan::AccessDenied, with: :rescue_can_can

  before_action -> { flash.now[:error] &&= flash[:error].html_safe if flash[:html_safe] }

  def current_user
    @current_user ||= request.env['warden']&.user&.user_object || User.new
  end

  def current_user?
    current_user.sunetid.present?
  end

  helper_method :current_user, :current_user?, :sso_user?

  private

  def sso_user?
    current_user.sso_user?
  end

  def rescue_can_can(exception)
    logger.debug { "Access denied on #{exception.action} #{exception.subject.inspect}" }
    render status: :forbidden, plain: 'Access to this resource is denied.'
  end

  def redirect_after_action
    if params[:referrer]
      redirect_to post_action_redirect_url
    else
      redirect_back fallback_location: root_url
    end
  end

  def post_action_redirect_url
    params[:referrer].presence || root_url
  end

  # rubocop:disable Metrics/AbcSize, Metrics/MethodLength
  def search_patron_request
    patron_request = PatronRequest
    if params['start_date']
      start_date = Date.parse(params['start_date'])
      end_date = Date.parse(params['end_date'])
      patron_request = patron_request.where(created_at: start_date.beginning_of_day..end_date.end_of_day)
    end

    patron_request = patron_request.where(service_point_code: params['service_point_code']) if params['service_point_code']

    patron_request = patron_request.select { |record| params['request_type'].include?(record.type) } if params['request_type']

    if params['origin_library_code']
      patron_request = patron_request.select do |record|
        params['origin_library_code'].include?(record.origin_library_code)
      end
    end

    patron_request
  end

  # rubocop:enable Metrics/AbcSize, Metrics/MethodLength
end
