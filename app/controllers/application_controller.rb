# nodoc: Autogenerated
class ApplicationController < ActionController::Base
  # Prevent CSRF attacks by raising an exception.
  # For APIs, you may want to use :null_session instead.
  protect_from_forgery with: :exception

  rescue_from CanCan::AccessDenied, with: :rescue_can_can

  def current_user
    @current_user ||= begin
      if user_id.present?
        user = User.find_or_create_by(webauth: user_id)
        user.ldap_group_string = request_ldap if request_ldap
        user
      else
        User.new
      end
    end
  end
  helper_method :current_user

  def current_ability
    @current_ability ||= Ability.new(current_user, params[:token])
  end

  private

  def create_via_post?
    params[:action].to_sym == :create && request.post?
  end

  def webauth_user?
    current_user.webauth_user?
  end

  def rescue_can_can(exception)
    Rails.logger.debug "Access denied on #{exception.action} #{exception.subject.inspect}"

    fail exception
  end

  def user_id
    request.env['REMOTE_USER'] || ENV['REMOTE_USER']
  end

  def request_ldap
    request_env_ldap || fake_work_group
  end

  def request_env_ldap
    request.env['WEBAUTH_LDAPPRIVGROUP'] if user_id && request.env['WEBAUTH_LDAPPRIVGROUP']
  end

  def fake_work_group
    Settings.fake_work_groups[user_id] if user_id && use_fake_workgroups?
  end

  # Only allow fake work groups in development
  # TODO: Remove this once we have ldap integration
  def use_fake_workgroups?
    Settings.fake_work_groups &&
      Settings.fake_work_groups[user_id] &&
      Rails.env.development?
  end
end
